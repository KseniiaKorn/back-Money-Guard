{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Money Guard",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Money Guard is a personal finance tracking application. It allows users to create, edit, and view transactions, analyze statistics, and check their current balance. The app uses secure authentication with JWT tokens."
  },
  "servers": [
    {
      "url": "https://moneyguard-app.onrender.com"
    },
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "User registration, login, token refresh, and logout functionality"
    },
    {
      "name": "Transactions",
      "description": "Creating, editing, deleting, and retrieving financial transactions"
    },
    {
      "name": "User",
      "description": "Retrieving user information and account balance"
    },
    {
      "name": "Currency",
      "description": "Fetching current exchange rates from the Monobank API"
    },
    {
      "name": "Categories",
      "description": "Viewing predefined income and expense categories"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login a  user",
        "operationId": "loginUser",
        "description": "Login a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "anna@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "1QSET9xad"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "PnIvkETe3ogr7hSpeyKRZc5qVLW837r/hjNsVrW/"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-login"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logout user by sessionId",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "schema": {
              "type": "string",
              "example": "j%3A%22681a10304b7d89856843a146%22"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User logged out "
          },
          "401": {
            "$ref": "#/components/responses/401-logout"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Register a new user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Anna"
                  },
                  "email": {
                    "type": "string",
                    "example": "anna@mail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "1QSET9xad"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "message",
                    "user"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/409"
          }
        }
      }
    },
    "/auth/refresh-session": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh session by refreshToken",
        "operationId": "refreshSession",
        "description": "Refresh session by cookies refreshToken",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "cookie",
            "name": "refreshToken",
            "schema": {
              "type": "string",
              "example": "nb97XuN7KYiylPuEcdXsG29G9iaekNOP5%2Feta3%2BL"
            }
          },
          {
            "in": "cookie",
            "name": "sessionId",
            "schema": {
              "type": "string",
              "example": "j%3A%22681a10304b7d89856843a146%22"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "PnIvkETe3ogr7hSpeyKRZc5qVLW837r/hjNsVrW/"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-session"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current users information",
        "operationId": "getUser",
        "description": "Get current users information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User info fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User info fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-session"
          }
        }
      }
    },
    "/users/user/update/{userId}": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Get current users information",
        "operationId": "editUser",
        "description": "Get current users information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "680fb1a9311824996bbaf348"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Maria"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully patched a user",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a user"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-session"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get income and expense categories",
        "operationId": "getCategories",
        "description": "Returns categorized lists of incomes and expenses",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Categories fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Categories fetched successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/categories"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Something went wrong on the server"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/summary/:period": {
      "get": {
        "tags": [
          "Summary"
        ],
        "summary": "Retrieve transaction summary for a specific period",
        "operationId": "getSummary",
        "description": "Retrieves a summary of transactions for the authenticated user within the specified period (YYYY-MM). The response includes income and expense details by category, total income, total expense, and balance.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "period",
            "in": "path",
            "required": true,
            "description": "The period for which to retrieve the summary, in YYYY-MM format (e.g., 2025-04).",
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-(0[1-9]|1[0-2])$",
              "example": "2025-04"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction summary",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved summary for period 2025-04!"
                    },
                    "income": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "categoryId": {
                            "type": "string",
                            "example": "6804058087a5c385d8e99714"
                          },
                          "title": {
                            "type": "string",
                            "example": "Incomes"
                          },
                          "total": {
                            "type": "number",
                            "example": 50000
                          }
                        }
                      }
                    },
                    "expense": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "categoryId": {
                            "type": "string",
                            "example": "6804060687a5c385d8e99724"
                          },
                          "title": {
                            "type": "string",
                            "example": "Leisure"
                          },
                          "total": {
                            "type": "number",
                            "example": 10000
                          }
                        }
                      }
                    },
                    "totalIncome": {
                      "type": "number",
                      "example": 50000
                    },
                    "totalExpense": {
                      "type": "number",
                      "example": 10000
                    },
                    "balance": {
                      "type": "number",
                      "example": 40000
                    }
                  }
                },
                "example": {
                  "status": 200,
                  "message": "Successfully retrieved summary for period 2025-04!",
                  "income": [
                    {
                      "categoryId": "6804058087a5c385d8e99714",
                      "title": "Incomes",
                      "total": 50000
                    }
                  ],
                  "expense": [
                    {
                      "categoryId": "6804060687a5c385d8e99724",
                      "title": "Leisure",
                      "total": 10000
                    }
                  ],
                  "totalIncome": 50000,
                  "totalExpense": 10000,
                  "balance": 40000
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-session"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
"/transactions": {
    "get": {
      "tags": [
        "Transactions"
      ],
      "summary": "Get list of transactions",
      "operationId": "getTransactions",
      "description": "Get list of transactions with this endpoint",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "required": true,
          "description": "Bearer token",
          "schema": {
            "type": "string"
          },
          "example": "Bearer your_token"
        }
      ],
      "responses": {
        "200": {
          "description": "Successfully find transactions!",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "example": 200
                  },
                  "message": {
                    "type": "string",
                    "example": "Successfully find transactions"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/transaction"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "401": {
          "$ref": "#/components/responses/401"
        }
      }
    },
    "post": {
      "tags": [
        "Transactions"
      ],
      "summary": "Create transaction",
      "operationId": "createTransaction",
      "description": "Create a transaction with payload",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "required": true,
          "description": "Bearer token",
          "schema": {
            "type": "string"
          },
          "example": "Bearer your_token"
        }
      ],
      "requestBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "transactionType",
                "categoryId",
                "summ"
              ],
              "properties": {
                "date": {
                  "description": "Date of transaction",
                  "type": "string",
                  "example": "2025-05-26"
                },
                "transactionType": {
                  "description": "Type of transaction",
                  "enum": [
                    "income",
                    "expense"
                  ],
                  "type": "string",
                  "example": "income"
                },
                "categoryId": {
                  "description": "Category of transaction",
                  "type": "string",
                  "example": "6832bb88f1080d2226b097a6"
                },
                "summ": {
                  "description": "Summa of transaction",
                  "type": "number",
                  "example": 0.01
                },
                "comment": {
                  "description": "Comment about transaction",
                  "type": "string",
                  "example": "Comment about transaction"
                }
              }
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Creates a transaction",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "example": 201
                  },
                  "message": {
                    "type": "string",
                    "example": "Successfully add transaction"
                  },
                  "data": {
                    "type": "object",
                    "$ref": "#/components/schemas/transaction"
                  }
                }
              }
            }
          }
        },
        "401": {
          "$ref": "#/components/responses/401"
        }
      }
    }
  },
  "/transactions/{id}": {
    "patch": {
      "tags": [
        "Transactions"
      ],
      "summary": "Update a transaction",
      "operationId": "updateTransaction",
      "description": "Update an existing transaction with new details",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Transaction ID to update",
          "schema": {
            "type": "string",
            "example": "68334660433a81c02a6e29ed"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "transactionType": {
                  "type": "string",
                  "enum": [
                    "income",
                    "expense"
                  ],
                  "example": "expense"
                },
                "categoryId": {
                  "type": "string",
                  "example": "6830eb9602da869876fbfdd3"
                },
                "summ": {
                  "type": "number",
                  "minimum": 0,
                  "example": 50
                },
                "date": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2025-05-25T16:33:36.722Z"
                },
                "comment": {
                  "type": "string",
                  "maxLength": 300,
                  "example": "Grocery shopping"
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Transaction updated successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "example": 200
                  },
                  "message": {
                    "type": "string",
                    "example": "Transaction updated successfully"
                  },
                  "transaction": {
                    "$ref": "#/components/schemas/transaction"
                  }
                }
              }
            }
          }
        },
        "401": {
          "$ref": "#/components/responses/401-session"
        },
        "404": {
          "description": "Transaction not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "example": 404
                  },
                  "message": {
                    "type": "string",
                    "example": "Transaction not found"
                  }
                }
              }
            }
          }
        }
      }
    },
    "delete": {
      "tags": [
        "Transactions"
      ],
      "summary": "Delete a transaction",
      "operationId": "deleteTransaction",
      "description": "Delete an existing transaction",
      "security": [
        {
          "bearerAuth": []
        }
      ],
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Transaction ID to delete",
          "schema": {
            "type": "string",
            "example": "68334660433a81c02a6e29ed"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Transaction deleted successfully",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "example": 200
                  },
                  "message": {
                    "type": "string",
                    "example": "Transaction deleted successfully"
                  }
                }
              }
            }
          }
        },
        "401": {
          "$ref": "#/components/responses/401-session"
        },
        "404": {
          "description": "Transaction not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "example": 404
                  },
                  "message": {
                    "type": "string",
                    "example": "Transaction not found"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "transaction": {
        "type": "object",
        "required": [
          "_id",
          "transactionType",
          "categoryId",
          "summ",
          "date",
          "userId"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Transaction ID",
            "example": "68334660433a81c02a6e29ed"
          },
          "transactionType": {
            "type": "string",
            "description": "Type of transaction",
            "enum": [
              "income",
              "expense"
            ],
            "example": "expense"
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID reference",
            "example": "6830eb9602da869876fbfdd3"
          },
          "summ": {
            "type": "number",
            "description": "Transaction amount",
            "minimum": 0,
            "example": 50
          },
          "date": {
            "type": "string",
            "description": "Transaction date",
            "format": "date-time",
            "example": "2025-05-25T16:33:36.722Z"
          },
          "comment": {
            "type": "string",
            "description": "Optional transaction comment",
            "maxLength": 300,
            "example": "Grocery shopping"
          },
          "userId": {
            "type": "string",
            "description": "User ID who owns the transaction",
            "example": "682bb8d41aabec1ccc21a0a0"
          },
          "createdAt": {
            "type": "string",
            "description": "Transaction creation timestamp",
            "format": "date-time",
            "example": "2025-05-25T16:33:36.723Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Transaction last update timestamp",
            "format": "date-time",
            "example": "2025-05-25T16:33:36.723Z"
          }
        }
      },
      "user": {
        "type": "object",
        "required": [
          "name",
          "email",
          "id"
        ],
        "properties": {
          "name": {
            "description": "User name",
            "type": "string",
            "example": "Anna"
          },
          "email": {
            "description": "User email",
            "type": "string",
            "example": "anna@mail.com"
          },
          "id": {
            "description": "User id",
            "type": "string",
            "example": "681a09af61bdc00bfe787f44"
          }
        }
      },
      "categories": {
        "type": "object",
        "required": [
          "incomes",
          "expenses"
        ],
        "properties": {
          "incomes": {
            "type": "array",
            "description": "List of income categories",
            "items": {
              "type": "string"
            },
            "example": [
              "Incomes"
            ]
          },
          "expenses": {
            "type": "array",
            "description": "List of expense categories",
            "items": {
              "type": "string"
            },
            "example": [
              "Main expenses",
              "Products",
              "Car",
              "Self care",
              "Child care",
              "Household products",
              "Education",
              "Leisure",
              "Other expenses",
              "Entertainment"
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "User not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "User not found for update info"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "User with this email already exist",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "message"
              ],
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Email already in use"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "An unexpected error occured in the server, please try again later"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401-login": {
        "description": "Incorrect email or password",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "enum": [
                        "User not found",
                        "Password is incorrect"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401-logout": {
        "description": "Error with session",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "enum": [
                        "Session not found"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401-session": {
        "description": "Errors with session or token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "enum": [
                        "Session token expired"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "name",
          "email",
          "id"
        ],
        "properties": {
          "name": {
            "description": "User name",
            "type": "string",
            "example": "Anna"
          },
          "email": {
            "description": "User email",
            "type": "string",
            "example": "anna@mail.com"
          },
          "id": {
            "description": "User id",
            "type": "string",
            "example": "681a09af61bdc00bfe787f44"
          }
        }
      },
      "categories": {
        "type": "object",
        "required": [
          "incomes",
          "expenses"
        ],
        "properties": {
          "incomes": {
            "type": "array",
            "description": "List of income categories",
            "items": {
              "type": "string"
            },
            "example": [
              "Incomes"
            ]
          },
          "expenses": {
            "type": "array",
            "description": "List of expense categories",
            "items": {
              "type": "string"
            },
            "example": [
              "Main expenses",
              "Products",
              "Car",
              "Self care",
              "Child care",
              "Household products",
              "Education",
              "Leisure",
              "Other expenses",
              "Entertainment"
            ]
          }
        }
      },
      "transaction": {
        "type": "object",
        "required": [
          "_id",
          "transactionType",
          "categoryId",
          "summ",
          "date"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of transaction",
            "example": [
              "6832bb88f1080d2226b097a6"
            ]
          },
          "transactionType": {
            "type": "string",
            "description": "Type of transaction",
            "enum": [
              "income",
              "expense"
            ],
            "example": [
              "income"
            ]
          },
          "categoryId": {
            "type": "string",
            "description": "Category of transaction",
            "example": [
              "6832bb88f1080d2226b097a6"
            ]
          },
          "summ": {
            "type": "number",
            "description": "Summa of transaction",
            "example": [
              0.01
            ]
          },
          "date": {
            "type": "string",
            "description": "Date of transaction",
            "example": [
              "2025-05-26"
            ]
          },
          "comment": {
            "type": "string",
            "description": "Comment about transaction",
            "example": [
              "Comment about transaction"
            ]
          },
          "userId": {
            "type": "string",
            "description": "Id of user",
            "example": [
              "6832bb88f1080d2226b097a6"
            ]
          }
        }
      }
    }
  }
}